{"version":3,"sources":["components/Challenge.js","components/Answer.js","components/PaperBlackBox.js","components/GeneratedBlackBoxElement.js","components/CreateBlackBox.js","components/Input.js","components/ResultsRow.js","components/Results.js","components/SubmissionModal.js","components/StartChallenge.js","App.js","index.js"],"names":["Challenge","state","to","style","textDecoration","margin","type","className","width","textAlign","fontSize","marginTop","fontWeight","display","justifyContent","React","Component","Answer","PaperBlackBox","props","size","canEdit","accept","err","errMsg","counter","queriesArr","outputArr","numOfQueries","currOutput","reveal","blackbox","handleChange","bind","focusInput","createRef","handleOutput","storeOutput","this","current","focus","event","setState","target","value","test","length","output","validateSize","alert","queries","Math","ceil","log2","parseInt","temp","i","push","bitmask","j","e","preventDefault","validateOutput","temparr","split","temparr2","hash","error","forEach","ele","tempEle","trim","tempNum","temparr3","universalSet","outputArrComp","newarr","hash2","blackboxlist","leftover","loop1","hash3","k","console","log","marginBottom","name","placeholder","onChange","disabled","ref","onClick","declareSize","cursor","resetSize","color","acceptChallenge","toString","onSubmit","autoFocus","calculateBlackBox","height","map","GeneratedBlackBoxElement","index","eleStyle","CreateBlackBox","genBlackBox","newbox","n","rand","floor","random","temphash","overflowY","maxHeight","key","Input","handler","htmlFor","enabled","ResultsRow","overflowX","id","result","Results","backgroundColor","scope","results","SubmissionModal","answer","ans","validateAnswer","query","submitHandler","onHide","childProps","show","Modal","aria-labelledby","centered","Header","closeButton","Title","Body","paddingBottom","Footer","Button","variant","submitAndDismissModal","StartChallenge","highScore","attemptedSize","createdBlackBox","generateBtn","itemSpan","currentQuery","resultsArr","modalShow","success","loading","changeSize","queryHandler","setModalShow","submitHandlerWithModal","visible","trialAnswer","arrMatches","attempt","arr","rand1","min","rand2","buff","validateQuery","resultsarr","tempEle2","res","randomizeArray","setTimeout","opacity","defaultValue","max","step","createNewBlackBox","resetBlackBox","marginRight","position","top","right","App","path","exact","render","zIndex","marginLeft","src","alt","component","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f16746b0.chunk.js","sourcesContent":["import React from 'react';\nimport {Link} from 'react-router-dom'\n\nclass Challenge extends React.Component {\n    state = {\n\n    }\n    render() { \n        return (\n            <div>\n            <Link to=\"/\" style={{textDecoration:\"none\", margin:\"1rem\"}}>\n                <button type=\"button\" className=\" btn btn-dark btn-exit\">\n                    Exit Challenge Room\n                </button>\n            </Link>\n            <div className=\"container\">\n                <div className=\"flex-column align-content-center\" style={{width:\"100%\"}}>\n                    <div className=\"sub-intro\" style={{textAlign:\"center\", fontSize:\"3.5vmin\"}}>Welcome to my Challenge</div>\n                    <div className=\"regText\" style={{textAlign:\"center\", marginTop:\"1rem\"}}>\n                        In this room, you shall attempt to guess the ordering of distinct items in a black box list using the fewest number of queries.\n                        <br/><br/>\n                        For example: we have the following black box list: [2, 14, 9, 15, 3, 7, 11, 16] -\n                        a black box list is just a list whose items we have no knowledge about.<br/>\n                        <span style={{fontWeight:\"bold\"}}>However we are allowed to know the total number of items in the box.</span>\n                        <br/><br/>\n                        You can query the black box list by asking questions in the following format:\n                        <br/><br/>\n                        <b>Input (remove [] for actual input)</b>: [1, 5, 7] - Give me the 1st, 5th and 7th item in the list <br/>\n                        <b>Output:</b> [3, 11, 2] -\n                        A collection containing the 1st, 5th and 7th item <br/><br/>\n                        <span style={{fontWeight:\"bold\"}}>The output collection contains the items specified by the query but in jumbled up\n                        order so as to not reveal the exact order of each individual item in the black box list since we don't know if the\n                        first item in the output collection corresponds to the 1st, 5th or 7th item in the black box list.\n                        </span><br/><br/>\n                        Obviously the maximum size of the input is the size of the black box list\n                        which will return a collection that contains all the items in the black box list<br/><br/>\n\n                        Once you feel that you know the order of the items in the black box list, submit your answer in the format below (without brackets []):<br/>\n                        [a<sub>1</sub>, a<sub>2</sub>, a<sub>3</sub>, a<sub>4</sub>... a<sub>i</sub>, ...a<sub>n</sub>]<br/><br/>where a<sub>i</sub> is the \n                        i<sup>th</sup> item in the black box list and n is the number of items in the black box list\n                        <br/><br/>\n                        e.g. [3, 5, 9, 2, 1]\n                    </div>\n                </div>\n            </div>\n            <Link to=\"/challenge/start\" style={{textDecoration:\"none\", display:\"flex\", justifyContent:\"center\", marginTop:\"1rem\"}}>\n                <div style={{width:\"60vmin\"}}>\n                    <button type=\"button\" className=\"btn-block btn-danger btn-font\">\n                        Start Challenge\n                    </button>\n                </div>\n            </Link>\n            </div>  \n        );\n    }\n}\n\nexport default Challenge;\n","import React, { Component } from 'react';\nimport {Link} from 'react-router-dom'\n\nclass Answer extends Component {\n    state = {  }\n    render() { \n        return (\n            <div>\n            <Link to=\"/\" style={{textDecoration:\"none\", margin:\"1rem\"}}>\n                <button type=\"button\" className=\" btn btn-dark btn-exit\">\n                    Exit Answer Room\n                </button>\n            </Link>\n            <div className=\"container\">\n                <div className=\"flex-column align-content-center\" style={{width:\"100%\"}}>\n                    <div className=\"sub-intro\" style={{textAlign:\"center\", fontSize:\"3.5vmin\"}}>Welcome to the Answer Room</div>\n                    <div className=\"regText\" style={{textAlign:\"center\", marginTop:\"1rem\"}}>\n                        In this room, I will attempt to guess the ordering of distinct items in a black box list using the fewest number of queries.\n                        <br/><br/>\n                        For example: we have the following black box list: [2, 14, 9, 15, 3, 7, 11, 16] - \n                        a black box list is just a list whose items we have no knowledge about.<br/> \n                        <span style={{fontWeight:\"bold\"}}>However we are allowed to know the total number of items in the box.</span>\n                        <br/><br/>\n                        I can query the black box list by asking questions in the following format:\n                        <br/><br/>\n                        <b>Input:</b> [1, 5, 7] - Give me the 1st, 5th and 7th item in the list <br/><br/>\n                        Output (remove [] when entering output): [3, 11, 2] - \n                        A collection containing the 1st, 5th and 7th item <br/><br/>\n                        <span style={{fontWeight:\"bold\"}}>The output collection contains the items specified by the query but in jumbled up\n                        order so as to not reveal the exact order of each individual item in the black box list since we don't know if the\n                        first item in the output collection corresponds to the 1st, 5th or 7th item in the black box list.\n                        </span>\n                    </div>\n                </div>\n                <Link to=\"/answer/createblackbox\" style={{textDecoration:\"none\", display:\"flex\", justifyContent:\"center\", marginTop:\"2vmin\"}}>\n                    <div style={{width:\"60vmin\"}}>\n                        <button type=\"button\" className=\"btn-block btn-secondary btn-font\">\n                            Create black box list, I promise I won't peek\n                        </button>\n                    </div>\n                </Link>\n                <Link to=\"/answer/paperblackbox\" style={{textDecoration:\"none\", display:\"flex\", justifyContent:\"center\",}}>\n                    <div style={{width:\"60vmin\"}}>\n                        <button type=\"button\" className=\"btn-block btn-danger btn-font\">\n                            Try writing the contents of the black box on paper instead\n                        </button>\n                    </div>\n                </Link>\n            </div>\n            </div>\n        );\n    }\n}\n\nexport default Answer;","import React, { Component } from 'react';\nimport {Link} from 'react-router-dom'\n\nclass PaperBlackBox extends Component {\n    constructor(props){\n        super(props)\n        this.state={\n            size: \"\",\n            canEdit: true,\n            accept: false,\n            err: false,\n            errMsg: \"\",  // using alert instead of printing errMsg since \\n does not work properly\n            counter: 0,\n            queriesArr: [],\n            outputArr: [],\n            numOfQueries: 0,\n            currOutput: \"\",\n            reveal: false,\n            blackbox: \"\",\n        }\n        this.handleChange=this.handleChange.bind(this)\n        this.focusInput = React.createRef()\n        this.handleOutput=this.handleOutput.bind(this)\n        this.storeOutput=this.storeOutput.bind(this)\n    }\n\n    componentDidMount(){\n        this.focusInput.current.focus()\n    }\n\n    handleChange(event){\n        this.setState({\n            size:event.target.value\n        })\n    }\n    handleOutput(event){\n        this.setState({\n            currOutput:event.target.value\n        })\n    }\n\n    validateSize(size){\n        const sizeRGEX = /^[0-9]*$/\n        return sizeRGEX.test(size) && size.length>0 && size!==\"0\" && size.length<3\n    }\n\n    validateOutput(output){\n        const outRGEX = /^[0-9,\\s]*$/\n        return outRGEX.test(output)\n    }\n\n    declareSize(){\n        if(this.validateSize(this.state.size)){\n            this.setState({\n                canEdit:false\n            })\n        }else{\n            alert(\"Enter one integer between 1 and 99 with no space or special characters\")\n        }\n    }\n\n    resetSize(){\n        this.setState({\n            size: \"\",\n            canEdit: true,\n            accept: false,\n            err: false,\n            errMsg: \"\",\n            counter: 0,\n            queriesArr: [],\n            outputArr: [],\n            numOfQueries: 0,\n            currOutput: \"\",\n            reveal: false,\n            blackbox: \"\",\n        })\n    }\n\n    acceptChallenge(){\n        const queries = Math.ceil(Math.log2(parseInt(this.state.size) + 1))\n        this.setState({\n            accept:true,\n            numOfQueries: queries\n        })\n        const temp = []\n        // const length = Math.pow(2,queries)\n        for(let i = 0; i<queries; i++){\n            const newarr=[]\n            temp.push(newarr)\n        }\n        for(let i =1; i<=this.state.size; i++){\n            let bitmask = 1\n            for(let j=0;j<queries;j++){\n                if((i & bitmask)=== bitmask){\n                    temp[j].push(\" \"+i+\" \") //optimised using counter instead of evaluating log2 each time\n                }\n                // console.log(bitmask)\n                bitmask*=2\n            }\n        }\n        // console.log(temp)\n        this.setState({\n            queriesArr:temp\n        })\n    }\n\n    storeOutput(e){\n        e.preventDefault()\n        const output = this.state.currOutput\n        // console.log(output)\n        if(this.validateOutput(output)){\n            let temparr = output.split(\",\")\n            const temparr2 = []\n            const hash={}\n            let error=false\n            temparr.forEach((ele)=>{\n                let tempEle=ele.trim()\n                let tempNum =parseInt(tempEle)\n                if(hash[tempNum]&&!error){\n                    alert(\"The output you have given contains duplicates, please remove all duplicates before trying again\")\n                    error=true\n                }\n                if(tempEle!==\"\" && !hash[tempNum]){\n                    temparr2.push(tempNum)\n                    hash[tempNum] = true\n                }\n            })\n            if(temparr2.length === this.state.queriesArr[this.state.counter].length){\n                const temparr3 = this.state.outputArr\n                temparr3.push(temparr2)\n                // console.log(temparr3)\n                this.setState({\n                    counter: this.state.counter+1,\n                    currOutput: \"\",\n                    outputArr: temparr3,\n                    err: false,\n                    errMsg:\"\",\n                })\n            }else{\n                alert(`The output you have given does not contain the same amount of items specified by the input query\\n\\nSize of input query: ${this.state.queriesArr[this.state.counter].length}\\nSize of output collection provided: ${temparr2.length}`)\n            }\n        }else{\n            alert(\"Please check your input and follow the format specified exactly:\\ne.g. <output>: 3, 5, 9, 2, 1\")\n        }\n    }\n\n    calculateBlackBox(){\n        const hash ={}\n        const universalSet=[]\n        const outputArr = this.state.outputArr\n        //generate univeral set\n        for(let i =0; i<this.state.numOfQueries;i++){\n            outputArr[i].forEach((ele)=>{\n                if(!hash[ele]){\n                    universalSet.push(ele)\n                    hash[ele]=true\n                }\n            })\n        }\n        // generate complement of all the output arrays\n        const outputArrComp =[]\n        for(let i =0; i<this.state.numOfQueries; i++){\n            const newarr =[]\n            let hash2={}\n            outputArr[i].forEach((ele)=>{\n                hash2[ele] = true\n            })\n            universalSet.forEach((ele)=>{\n                if(!hash2[ele]){\n                    newarr.push(ele)\n                }\n            })\n            outputArrComp.push(newarr)\n        }\n        const blackboxlist = []\n        let leftover = []\n    loop1:\n        for (let i = 1; i <=this.state.size; i++) {\n            let bitmask = 1\n            let temparr = []\n            let hash3 = {}\n            if((i & bitmask)===bitmask){\n                leftover=outputArr[0]\n            }else{\n                leftover=outputArrComp[0]\n            }\n            bitmask*=2\n            for(let j=1;j<this.state.numOfQueries;j++){\n                hash3={}\n                temparr = []\n                if((i & bitmask)=== bitmask){\n                    for(let k=0; k<outputArr[j].length;k++){\n                        const ele =outputArr[j][k]\n                        hash3[ele] = true\n                    }\n                    // outputArr[j].forEach((ele)=>{\n                    //     hash3[ele] = true\n                    // })\n                }else{\n                    for(let k=0; k<outputArrComp[j].length;k++){\n                        const ele =outputArrComp[j][k]\n                        hash3[ele] = true\n                    }\n                    // outputArrComp[j].forEach((ele)=>{\n                    //     hash3[ele] = true\n                    // })\n                }\n                for(let k=0; k<leftover.length;k++){\n                    const ele =leftover[k]\n                    if(hash3[ele]){\n                        temparr.push(ele)\n                    }\n                }\n                // leftover.forEach((ele)=>{\n                //     if(hash3[ele]){\n                //         temparr.push(ele)\n                //     }\n                // })\n                if(temparr.length===0){\n                    console.log('missing elements')\n                    this.setState({\n                        err:true,\n                        errMsg:\"A dark void looms over your fate\"\n                    })\n                    break loop1\n                }else{\n                    leftover=temparr\n                }\n                // console.log(bitmask)\n                bitmask*=2\n            }\n            if(leftover.length>1){\n                console.log('multiple elements')\n                this.setState({\n                    err:true,\n                    errMsg:\"Your fate shatters into fragments like shards of a broken mirror\"\n                })\n                break\n            }else{\n                blackboxlist.push(leftover)\n            }\n        }\n        // console.log(blackboxlist)\n        this.setState({\n            reveal:true,\n            blackbox:blackboxlist\n        })\n\n    }\n\n    render() { \n        return ( \n            <div>\n            <Link to=\"/answer\" style={{textDecoration:\"none\", margin:\"1rem\"}}>\n                <button type=\"button btn-exit\" className=\" btn btn-dark btn-exit\">\n                    Back to Answer Room\n                </button>\n            </Link>\n            <div className=\"container\" style={{marginBottom:\"35%\"}}>\n                <div className=\"flex-column align-content-center\" style={{width:\"100%\"}}>\n                    <div className=\"sub-intro\" style={{textAlign:\"center\", fontSize:\"3.5vmin\"}}>Paper Black Box List</div>\n                    <div className=\"regText\" style={{textAlign:\"center\", marginTop:\"1rem\"}}>\n                        First, declare the size of the black box list you are creating (between 1 and 99 items):\n                        <br/>\n                        <div style={{display:\"flex\", justifyContent:\"center\", marginTop:\"1vmin\"}}>\n                            <div className=\"input-group\" style={{width:\"50%\"}}>\n                            <input type=\"text\" \n                                className=\"form-control regText\" \n                                name=\"size-input\"\n                                placeholder=\"e.g. 63\"\n                                value={this.state.size}\n                                onChange={this.handleChange}\n                                disabled={!this.state.canEdit}\n                                // autoFocus={true} /* not supported on all browsers */\n                                ref={this.focusInput}></input>\n                                <div className=\"input-group-append\">\n                                    <button \n                                        className={this.state.canEdit?\"btn regText btn-danger\":\"btn regText btn-outline-secondary\"}\n                                        type=\"button\"\n                                        disabled={!this.state.canEdit}\n                                        onClick={(e)=>this.declareSize(e)}\n                                        style={!this.state.canEdit?{cursor:\"not-allowed\"}:{cursor:\"pointer\"}}\n                                        >Declare\n                                    </button>\n                                    <button \n                                        className={!this.state.canEdit?\"btn regText btn-danger\":\"btn regText btn-outline-secondary\"}\n                                        type=\"button\"\n                                        disabled={this.state.canEdit}\n                                        style={this.state.canEdit?{cursor:\"not-allowed\"}:{cursor:\"pointer\"}}\n                                        onClick={(e)=>this.resetSize(e)}\n                                        >Reset\n                                    </button>\n                                </div>\n                            </div>\n                        </div>\n                        {!this.state.canEdit&&\n                            <div>\n                                <div>\n                                    <br/>Next, write on a piece of paper the black box list of {this.state.size === \"1\" && <span>1 item</span>}\n                                    {this.state.size>1&& <span>{this.state.size}  <span style={{fontWeight:\"bold\", textDecoration:\"underline\"}}>distinct</span> items</span>}: <br/>\n                                    {this.state.size===\"1\"&&<span>[a<sub>1</sub>]</span>}\n                                    {this.state.size===\"2\"&&<span>[a<sub>1</sub>, a<sub>2</sub>]</span>}\n                                    {this.state.size===\"3\"&&<span>[a<sub>1</sub>, a<sub>2</sub>, a<sub>3</sub>]</span>}\n                                    {this.state.size>3&&<span>[a<sub>1</sub>, a<sub>2</sub>, ... a<sub>{this.state.size}</sub>]</span>}\n                                    <br/><br/>\n                                    where a<sub>i</sub> is the\n                                    i<sup>th</sup> item in the black box list -\n                                    e.g. [3, 5, 9, 2, 1]<br/><br/>\n                                    <b>Input:</b> [k<sub>1</sub>, k<sub>2</sub>, k<sub>3</sub>, ... k<sub>m</sub>] - Give me the k<sub>1</sub><sup>th</sup>, \n                                    k<sub>2</sub><sup>th</sup> ... and k<sub>m</sub><sup>th</sup> item in the list <br/>\n                                    Output  (remove [] for actual input): [a<sub>k<sub>1</sub></sub>, a<sub>k<sub>2</sub></sub>, a<sub>k<sub>3</sub></sub>, ... a<sub>k<sub>m</sub></sub>] - \n                                    A collection containing the a<sub>k<sub>1</sub></sub><sup>th</sup>, a<sub>k<sub>2</sub></sub><sup>th</sup> ... and a<sub>k<sub>m</sub></sub><sup>th</sup> item in <b>random order</b><br/><br/>\n                                    e.g. Black Box List of size 8: [2, 14, 9, 15, 3, 7, 11, 16]<br/><br/>\n                                    <b>Input:</b> [1, 5, 7] - Give me the 1st, 5th and 7th item in the list <br/>\n                                    <b>Output:</b> [3, 11, 2] -\n                                    A collection containing the 1st, 5th and 7th item in <b>any random order</b><br/><br/>\n                                    Before receiving an answer, one must first give answers<br/><br/>\n                                </div>\n                                <div style={{fontSize:\"3vmin\", color:\"red\"}}>\n                                    Now answer my queries truthfully:\n                                </div>\n                                {!this.state.accept&&\n                                    <div className=\"btn-group\" style={{width:\"60vmin\", marginTop:\"2vmin\", marginBottom:\"2vmin\"}}>\n                                        <button \n                                            className={!this.state.canEdit?\"btn regText btn-danger\":\"btn regText btn-outline-secondary\"}\n                                            type=\"button\"\n                                            onClick={(e)=>this.acceptChallenge(e)}\n                                            style={this.state.canEdit?{cursor:\"not-allowed\"}:{cursor:\"pointer\"}}\n                                            >Accept\n                                        </button>\n                                        <button \n                                            className={this.state.canEdit?\"btn regText btn-danger\":\"btn regText btn-outline-secondary\"}\n                                            type=\"button\"\n                                            disabled=\"true\"\n                                            style={!this.state.canEdit?{cursor:\"not-allowed\"}:{cursor:\"pointer\"}}\n                                            >Reject\n                                        </button>\n                                    </div>\n                                }\n                            </div>\n                        }\n                        {this.state.accept&&this.state.counter<this.state.numOfQueries &&\n                            <div>\n                                <br/>\n                                I will ask a total of {this.state.numOfQueries} {this.state.numOfQueries===1?\"query\":\"queries\"} \n                                <br/>\n                                <span style={{fontSize:\"2vmin\"}}>Number of queries asked: {(this.state.counter===this.state.numOfQueries-1)?<span style={{fontWeight:\"bold\", color:\"red\"}}>{this.state.counter} (1 more query)</span>:<span>{this.state.counter}</span>}</span><br/><br/>\n                                <b>Input:</b> <br/>[ {this.state.queriesArr[this.state.counter].toString()} ]\n                                <br/><br/>\n                                {this.state.err&&\n                                    <div>\n                                        {this.state.errMsg}\n                                        <br/><br/>\n                                    </div>\n                                }\n                                <b>Output:</b>\n                                <div style={{display:\"flex\", justifyContent:\"center\", marginTop:\"1vmin\"}}>\n                                    <form onSubmit={(e)=>this.storeOutput(e)}>\n                                        <div className=\"input-group\">\n                                            <input type=\"text\"\n                                                className=\"form-control regText\"\n                                                name=\"size-input\"\n                                                placeholder=\"e.g. 1, 8, 15, 3\"\n                                                value={this.state.currOutput}\n                                                onChange={this.handleOutput}\n                                                autoFocus={true}\n                                                ></input>\n                                            <div className=\"input-group-append\">\n                                                <button \n                                                    className=\"btn regText btn-danger\"\n                                                    type=\"submit\"\n                                                    >Submit\n                                                </button>\n                                            </div>\n                                        </div>\n                                    </form>\n                                </div>\n                            </div>\n                        }\n                        {this.state.counter===this.state.numOfQueries && this.state.accept && !this.state.reveal &&\n                            <div style={{display:\"flex\", justifyContent:\"center\", marginTop:\"5vmin\"}}>\n                                <div style={{width:\"40vmin\"}}>\n                                    <button \n                                        className=\"btn-block regText btn-danger border-0\"\n                                        type=\"button\"\n                                        onClick={(e)=>this.calculateBlackBox(e)}\n                                        style={{height:\"5vmin\"}}\n                                        >Reveal your fate\n                                    </button>\n                                </div>\n                            </div>\n                        }\n                        {this.state.reveal&&!this.state.err&&\n                            <>\n                                <div style={{fontSize:\"2vmin\"}}>\n                                    <br/>\n                                    By trial of fire, I bestow upon you the Blinding Light of Kars, the Divine Wind of Wamuu, and the Eternal Flames of Esidisi\n                                    <br/><br/>\n                                    Behold the contents of the black box list:\n                                    <br/><br/>\n                                    <span style={{fontSize:\"3vmin\", fontWeight:\"bold\"}}>[ {this.state.blackbox.map((ele)=>{return (\" \"+ ele +\" \")}).toString()} ]</span>\n                                </div>\n                                <br/>*if the answer does not match, please double check the output collection you provided\n                                <Link to=\"/answer/createblackbox\" style={{textDecoration:\"none\", display:\"flex\", justifyContent:\"center\", marginTop:\"2vmin\"}}>\n                                    <div style={{width:\"60vmin\"}}>\n                                        <button type=\"button\" className=\"btn-block btn-danger btn-font\">\n                                            Try generating the black box list instead, I promise I won't peek\n                                        </button>\n                                    </div>\n                                </Link>\n                            </>\n                        }\n                        {this.state.reveal&&this.state.err&&\n                            <div style={{fontSize:\"2vmin\"}}>\n                                <br/>\n                                Noo... It can't be.... My magic... fails me...\n                                <br/><br/>\n                                <span style={{color:\"red\", fontWeight:\"bold\"}}>Cannot proceed with prophecy: \n                                <br/>{this.state.errMsg}</span>\n                                <br/><br/>\n                                Please double check the output collection you provided and try again.<br/>\n                                Try writing down the input query on paper to make sure you did not make any mistakes\n                            </div>\n                        }\n                    </div>\n                </div>\n                \n            </div>\n            </div>\n        );\n    }\n}\n\nexport default PaperBlackBox;","import React from 'react';\n\nconst GeneratedBlackBoxElement =(props)=>{\n    const ele = parseInt(props.ele)\n    const index = props.index\n    const size = props.size\n    let eleStyle={}\n\n    console.log(props.hash)\n    if(props.hash[index]){\n        eleStyle={color:\"red\", textDecoration:\"underline\"}\n        console.log('working')\n    }\n\n    if(index === size-1){\n        return(\n            <span> <span style={eleStyle}>{ele}</span> </span>\n        )\n    }else{\n        return(\n            <span> <span style={eleStyle}>{ele}</span> ,</span>\n        )\n    }\n}\n\nexport default GeneratedBlackBoxElement","import React, { Component } from 'react';\nimport {Link} from 'react-router-dom'\nimport GeneratedBlackBoxElement from './GeneratedBlackBoxElement'\n\nclass CreateBlackBox extends Component {\n    constructor(props){\n        super(props)\n        this.state={\n            size: \"\",\n            canEdit: true,\n            accept: false,\n            err: false,\n            errMsg: \"\",  // using alert instead of printing errMsg since \\n does not work properly\n            counter: 0,\n            queriesArr: [],\n            outputArr: [],\n            numOfQueries: 0,\n            currOutput: \"\",\n            reveal: false,\n            blackbox: \"\",\n            genBlackBox: [],\n            hash: {},\n        }\n        this.handleChange=this.handleChange.bind(this)\n        this.focusInput = React.createRef()\n        this.handleOutput=this.handleOutput.bind(this)\n        this.storeOutput=this.storeOutput.bind(this)\n    }\n\n    componentDidMount(){\n        this.focusInput.current.focus()\n    }\n\n    handleChange(event){\n        this.setState({\n            size:event.target.value\n        })\n    }\n    handleOutput(event){\n        this.setState({\n            currOutput:event.target.value\n        })\n    }\n\n    validateSize(size){\n        const sizeRGEX = /^[0-9]*$/\n        return sizeRGEX.test(size) && size.length>0 && size!==\"0\" && size.length<3\n    }\n\n    validateOutput(output){\n        const outRGEX = /^[0-9,\\s]*$/\n        return outRGEX.test(output)\n    }\n\n    declareSize(){\n        if(this.validateSize(this.state.size)){\n            const newbox =[]\n            const n = this.state.size\n            const hash ={}\n            let i = 0;\n            while(i<n){\n                const rand = Math.floor(Math.random() * 10 * n)\n                // console.log(rand)\n                if(hash[rand]===true){\n                    //skip\n                }else{\n                    hash[rand] = true\n                    newbox.push(rand)\n                    i++\n                }\n            }\n            //generate queriesArr\n            const queries = Math.ceil(Math.log2(parseInt(this.state.size) + 1))\n            const temp = []\n            // const length = Math.pow(2,queries)\n            for(let i = 0; i<queries; i++){\n                const newarr=[]\n                temp.push(newarr)\n            }\n            for(let i =1; i<=this.state.size; i++){\n                let bitmask = 1\n                for(let j=0;j<queries;j++){\n                    if((i & bitmask)=== bitmask){\n                        temp[j].push(\" \"+i+\" \") //optimised using counter instead of evaluating log2 each time\n                    }\n                    // console.log(bitmask)\n                    bitmask*=2\n                }\n            }\n            // console.log(temp)\n            this.setState({\n                queriesArr:temp,\n                canEdit:false,\n                genBlackBox:newbox,\n                numOfQueries:queries\n            })\n        }else{\n            alert(\"Enter one integer between 1 and 99 with no space or special characters\")\n        }\n    }\n\n    resetSize(){\n        this.setState({\n            size: \"\",\n            canEdit: true,\n            accept: false,\n            err: false,\n            errMsg: \"\",\n            counter: 0,\n            queriesArr: [],\n            outputArr: [],\n            numOfQueries: 0,\n            currOutput: \"\",\n            reveal: false,\n            blackbox: \"\",\n            genBlackBox: [],\n            hash: {},\n        })\n    }\n\n    acceptChallenge(){\n        const temphash = {}\n        this.state.queriesArr[0].forEach((ele)=>{\n            temphash[parseInt(ele.trim())-1] = true\n        })\n        this.setState({\n            accept:true,\n            hash:temphash\n        })\n    }\n\n    storeOutput(e){\n        e.preventDefault()\n        const output = this.state.currOutput\n        // console.log(output)\n        if(this.validateOutput(output)){\n            let temparr = output.split(\",\")\n            const temparr2 = []\n            const hash={}\n            let error=false\n            temparr.forEach((ele)=>{\n                let tempEle=ele.trim()\n                let tempNum =parseInt(tempEle)\n                if(hash[tempNum]&&!error){\n                    alert(\"The output you have given contains duplicates, please remove all duplicates before trying again\")\n                    error=true\n                }\n                if(tempEle!==\"\" && !hash[tempNum]){\n                    temparr2.push(tempNum)\n                    hash[tempNum] = true\n                }\n            })\n            if(temparr2.length === this.state.queriesArr[this.state.counter].length){\n                const temparr3 = this.state.outputArr\n                temparr3.push(temparr2)\n                // console.log(temparr3)\n                const temphash = {}\n                if(this.state.counter<this.state.numOfQueries-1){\n                    this.state.queriesArr[this.state.counter+1].forEach((ele)=>{\n                        temphash[parseInt(ele.trim())-1] = true\n                    })\n                }\n                this.setState({\n                    counter: this.state.counter+1,\n                    currOutput: \"\",\n                    outputArr: temparr3,\n                    err: false,\n                    errMsg: \"\",\n                    hash: temphash\n                })\n            }else{\n                alert(`The output you have given does not contain the same amount of items specified by the input query\\n\\nSize of input query: ${this.state.queriesArr[this.state.counter].length}\\nSize of output collection provided: ${temparr2.length}`)\n            }\n        }else{\n            alert(\"Please check your input and follow the format specified exactly:\\ne.g. <output>: 3, 5, 9, 2, 1\")\n        }\n    }\n\n    calculateBlackBox(){\n        const hash ={}\n        const universalSet=[]\n        const outputArr = this.state.outputArr\n        //generate univeral set\n        for(let i =0; i<this.state.numOfQueries;i++){\n            outputArr[i].forEach((ele)=>{\n                if(!hash[ele]){\n                    universalSet.push(ele)\n                    hash[ele]=true\n                }\n            })\n        }\n        // generate complement of all the output arrays\n        const outputArrComp =[]\n        for(let i =0; i<this.state.numOfQueries; i++){\n            const newarr =[]\n            let hash2={}\n            outputArr[i].forEach((ele)=>{\n                hash2[ele] = true\n            })\n            universalSet.forEach((ele)=>{\n                if(!hash2[ele]){\n                    newarr.push(ele)\n                }\n            })\n            outputArrComp.push(newarr)\n        }\n        const blackboxlist = []\n        let leftover = []\n    loop1:\n        for (let i = 1; i <=this.state.size; i++) {\n            let bitmask = 1\n            let temparr = []\n            let hash3 = {}\n            if((i & bitmask)===bitmask){\n                leftover=outputArr[0]\n            }else{\n                leftover=outputArrComp[0]\n            }\n            bitmask*=2\n            for(let j=1;j<this.state.numOfQueries;j++){\n                hash3={}\n                temparr = []\n                if((i & bitmask)=== bitmask){\n                    for(let k=0; k<outputArr[j].length;k++){\n                        const ele =outputArr[j][k]\n                        hash3[ele] = true\n                    }\n                    // outputArr[j].forEach((ele)=>{\n                    //     hash3[ele] = true\n                    // })\n                }else{\n                    for(let k=0; k<outputArrComp[j].length;k++){\n                        const ele =outputArrComp[j][k]\n                        hash3[ele] = true\n                    }\n                    // outputArrComp[j].forEach((ele)=>{\n                    //     hash3[ele] = true\n                    // })\n                }\n                for(let k=0; k<leftover.length;k++){\n                    const ele =leftover[k]\n                    if(hash3[ele]){\n                        temparr.push(ele)\n                    }\n                }\n                // leftover.forEach((ele)=>{\n                //     if(hash3[ele]){\n                //         temparr.push(ele)\n                //     }\n                // })\n                if(temparr.length===0){\n                    console.log('missing elements')\n                    this.setState({\n                        err:true,\n                        errMsg:\"A dark void looms over your fate\"\n                    })\n                    break loop1\n                }else{\n                    leftover=temparr\n                }\n                // console.log(bitmask)\n                bitmask*=2\n            }\n            if(leftover.length>1){\n                console.log('multiple elements')\n                this.setState({\n                    err:true,\n                    errMsg:\"Your fate shatters into fragments like shards of a broken mirror\"\n                })\n                break\n            }else{\n                blackboxlist.push(leftover)\n            }\n        }\n        // console.log(blackboxlist)\n        this.setState({\n            reveal:true,\n            blackbox:blackboxlist\n        })\n\n    }\n    render() { \n        return ( \n            <div>\n            <Link to=\"/answer\" style={{textDecoration:\"none\", margin:\"1rem\"}}>\n                <button type=\"button btn-exit\" className=\" btn btn-dark btn-exit\">\n                    Back to Answer Room\n                </button>\n            </Link>\n            <div className=\"container\" style={{marginBottom:\"35%\"}}>\n                <div className=\"flex-column align-content-center\" style={{width:\"100%\"}}>\n                    <div className=\"sub-intro\" style={{textAlign:\"center\", fontSize:\"3.5vmin\"}}>Generate Black Box List</div>\n                    <div className=\"regText\" style={{textAlign:\"center\", marginTop:\"1rem\"}}>\n                        First, declare the size of the black box list you are creating (between 1 and 99 items):\n                        <br/>\n                        <div style={{display:\"flex\", justifyContent:\"center\", marginTop:\"1vmin\"}}>\n                            <div className=\"input-group\" style={{width:\"50%\"}}>\n                            <input type=\"text\" \n                                className=\"form-control regText\" \n                                name=\"size-input\"\n                                placeholder=\"e.g. 63\"\n                                value={this.state.size}\n                                onChange={this.handleChange}\n                                disabled={!this.state.canEdit}\n                                // autoFocus={true} /* not supported on all browsers */\n                                ref={this.focusInput}></input>\n                                <div className=\"input-group-append\">\n                                    <button \n                                        className={this.state.canEdit?\"btn regText btn-danger\":\"btn regText btn-outline-secondary\"}\n                                        type=\"button\"\n                                        disabled={!this.state.canEdit}\n                                        onClick={(e)=>this.declareSize(e)}\n                                        style={!this.state.canEdit?{cursor:\"not-allowed\"}:{cursor:\"pointer\"}}\n                                        >Declare\n                                    </button>\n                                    <button \n                                        className={!this.state.canEdit?\"btn regText btn-danger\":\"btn regText btn-outline-secondary\"}\n                                        type=\"button\"\n                                        disabled={this.state.canEdit}\n                                        style={this.state.canEdit?{cursor:\"not-allowed\"}:{cursor:\"pointer\"}}\n                                        onClick={(e)=>this.resetSize(e)}\n                                        >Reset\n                                    </button>\n                                </div>\n                            </div>\n                        </div>\n                        {!this.state.canEdit&&\n                            <div>\n                                <div>\n                                    <br/>\n                                    Generated Black Box List:\n                                    <br/>\n                                    <div style={{fontSize:\"3vmin\", fontWeight:\"bold\", overflowY:\"scroll\", maxHeight:\"20vmin\"}}>\n                                        [ {this.state.genBlackBox.map((ele, index)=>{\n                                            return <GeneratedBlackBoxElement hash={this.state.hash} size={this.state.size} ele={ele} index={index} key={index}/>\n                                        })}]\n                                    </div>\n                                    <br/>\n                                    <b>Input:</b> [k<sub>1</sub>, k<sub>2</sub>, k<sub>3</sub>, ... k<sub>m</sub>] - Give me the k<sub>1</sub><sup>th</sup>, \n                                    k<sub>2</sub><sup>th</sup> ... and k<sub>m</sub><sup>th</sup> item in the list <br/>\n                                    Output  (remove [] for actual input): [a<sub>k<sub>1</sub></sub>, a<sub>k<sub>2</sub></sub>, a<sub>k<sub>3</sub></sub>, ... a<sub>k<sub>m</sub></sub>] - \n                                    A collection containing the a<sub>k<sub>1</sub></sub><sup>th</sup>, a<sub>k<sub>2</sub></sub><sup>th</sup> ... and a<sub>k<sub>m</sub></sub><sup>th</sup> item in <b>random order</b><br/><br/>\n                                    e.g. Black Box List of size 8: [2, 14, 9, 15, 3, 7, 11, 16]<br/><br/>\n                                    <b>Input:</b> [1, 5, 7] - Give me the 1st, 5th and 7th item in the list <br/>\n                                    <b>Output:</b> [3, 11, 2] -\n                                    A collection containing the 1st, 5th and 7th item in <b>any random order</b><br/><br/>\n                                    Before receiving an answer, one must first give answers<br/><br/>\n                                </div>\n                                <div style={{fontSize:\"3vmin\", color:\"red\"}}>\n                                    Now answer my queries truthfully:<br/>(Enter the items in red)\n                                </div>\n                                {!this.state.accept&&\n                                    <div className=\"btn-group\" style={{width:\"60vmin\", marginTop:\"2vmin\", marginBottom:\"2vmin\"}}>\n                                        <button \n                                            className={!this.state.canEdit?\"btn regText btn-danger\":\"btn regText btn-outline-secondary\"}\n                                            type=\"button\"\n                                            onClick={(e)=>this.acceptChallenge(e)}\n                                            style={this.state.canEdit?{cursor:\"not-allowed\"}:{cursor:\"pointer\"}}\n                                            >Accept\n                                        </button>\n                                        <button \n                                            className={this.state.canEdit?\"btn regText btn-danger\":\"btn regText btn-outline-secondary\"}\n                                            type=\"button\"\n                                            disabled=\"true\"\n                                            style={!this.state.canEdit?{cursor:\"not-allowed\"}:{cursor:\"pointer\"}}\n                                            >Reject\n                                        </button>\n                                    </div>\n                                }\n                            </div>\n                        }\n                        {this.state.accept&&this.state.counter<this.state.numOfQueries &&\n                            <div>\n                                <br/>\n                                I will ask a total of {this.state.numOfQueries} {this.state.numOfQueries===1?\"query\":\"queries\"} \n                                <br/>\n                        <span style={{fontSize:\"2vmin\"}}>Number of queries asked: {(this.state.counter===this.state.numOfQueries-1)?<span style={{fontWeight:\"bold\", color:\"red\"}}>{this.state.counter} (1 more query)</span>:<span>{this.state.counter}</span>}</span><br/><br/>\n                                <b>Input:</b> <br/>[ {this.state.queriesArr[this.state.counter].toString()} ]\n                                <br/><br/>\n                                {this.state.err&&\n                                    <div>\n                                        {this.state.errMsg}\n                                        <br/><br/>\n                                    </div>\n                                }\n                                <b>Output:</b>\n                                <div style={{display:\"flex\", justifyContent:\"center\", marginTop:\"1vmin\"}}>\n                                    <form onSubmit={(e)=>this.storeOutput(e)}>\n                                        <div className=\"input-group\">\n                                            <input type=\"text\" \n                                                className=\"form-control regText\" \n                                                name=\"size-input\"\n                                                placeholder=\"e.g. 1, 8, 15, 3\"\n                                                value={this.state.currOutput}\n                                                onChange={this.handleOutput}\n                                                autoFocus={true}\n                                                ></input>\n                                            <div className=\"input-group-append\">\n                                                <button\n                                                    className=\"btn regText btn-danger\"\n                                                    type=\"submit\"\n                                                    >Submit\n                                                </button>\n                                            </div>\n                                        </div>\n                                    </form>\n                                </div>\n                            </div>\n                        }\n                        {this.state.counter===this.state.numOfQueries && this.state.accept && !this.state.reveal &&\n                            <div style={{display:\"flex\", justifyContent:\"center\", marginTop:\"5vmin\"}}>\n                                <div style={{width:\"40vmin\"}}>\n                                    <button \n                                        className=\"btn-block regText btn-danger border-0\"\n                                        type=\"button\"\n                                        onClick={(e)=>this.calculateBlackBox(e)}\n                                        style={{height:\"5vmin\"}}\n                                        >Reveal your fate\n                                    </button>\n                                </div>\n                            </div>\n                        }\n                        {this.state.reveal&&!this.state.err&&\n                            <>\n                                <div style={{fontSize:\"2vmin\"}}>\n                                    <br/>\n                                    By trial of fire, I bestow upon you the Blinding Light of Kars, the Divine Wind of Wamuu, and the Eternal Flames of Esidisi\n                                    <br/><br/>\n                                    Behold the contents of the black box list:\n                                    <br/>\n                                    <span style={{fontSize:\"3vmin\", fontWeight:\"bold\"}}>[ {this.state.blackbox.map((ele)=>{return (\" \"+ ele +\" \")}).toString()} ]</span>\n                                </div>\n                                <br/>*if the answer does not match, please double check the output collection you provided\n                                <Link to=\"/answer/paperblackbox\" style={{textDecoration:\"none\", display:\"flex\", justifyContent:\"center\", marginTop:\"2vmin\"}}>\n                                    <div style={{width:\"60vmin\"}}>\n                                        <button type=\"button\" className=\"btn-block btn-danger btn-font\">\n                                            Try writing the contents of the black box on paper instead\n                                        </button>\n                                    </div>\n                                </Link>\n                            </>\n                        }\n                        {this.state.reveal&&this.state.err&&\n                            <div style={{fontSize:\"2vmin\"}}>\n                                <br/>\n                                Noo... It can't be.... My magic... fails me...\n                                <br/><br/>\n                                <span style={{color:\"red\", fontWeight:\"bold\"}}>Cannot proceed with prophecy: \n                                <br/>{this.state.errMsg}</span>\n                                <br/><br/>\n                                Please double check the output collection you provided and try again.<br/>\n                                Make sure you entered the items in red correctly.\n                            </div>\n                        }\n                    </div>\n                </div>\n                \n            </div>\n            </div>\n\n        );\n    }\n}\n\nexport default CreateBlackBox;","import React, { Component } from 'react';\n\nclass Input extends Component {\n    state = {  }\n    render() {\n        return (\n            <div style={{display:\"flex\", justifyContent:\"center\", marginTop:\"1rem\"}}>\n                <div style={{width:\"60vmin\",}}>\n                    <form onSubmit={this.props.handler}>\n                        <div className=\"form-group regText\">\n                            <label htmlFor=\"query-input\">Input your queries here:</label>\n                            <input type=\"text\" \n                            className=\"form-control regText\" \n                            name=\"query-input\"\n                            placeholder={this.props.enabled ? \"e.g. 1, 5, 7, 10\" : \"Generate a black box list first\"}\n                            value={this.props.value}\n                            onChange={this.props.handleChange}\n                            disabled={!this.props.enabled}\n                            style={!this.props.enabled?{cursor:\"not-allowed\"}:{cursor:\"text\"}}\n                            ></input>\n                            <button type=\"submit\" className={this.props.enabled ? \"btn-font btn-danger\" : \"btn-font btn-secondary\"} style={!this.props.enabled?{cursor:\"not-allowed\"}:{cursor:\"pointer\"}} disabled={!this.props.enabled}>\n                                {this.props.enabled ? \"Submit query\" : \"Queries disabled\"}\n                            </button>\n                        </div>\n                    </form>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Input;","import React, { Component } from 'react';\n\nclass ResultsRow extends Component {\n    state = {  }\n    render() { \n        return(\n            <tr>\n                <td style={{overflowX: \"scroll\", fontWeight:\"bold\"}}>#{this.props.id}</td>\n                <td style={{overflowX: \"scroll\", fontWeight:\"bold\"}} className=\"text-capitalize\">{this.props.result[0]}</td>\n                <td style={{overflowX: \"scroll\", fontWeight:\"bold\"}} className=\"text-capitalize\">{this.props.result[1]}</td>\n            </tr>\n        )\n    }\n}\n\nexport default ResultsRow;","import React, { Component } from 'react';\nimport ResultsRow from './ResultsRow'\n\nclass Results extends Component {\n    state = {  }\n    render(){\n        const tableWrapper = {\n            overflowY: \"scroll\",\n            width:\"100%\",\n            maxHeight:\"400px\",\n            marginTop:\"3rem\",\n            fontSize:\"2vmin\"\n        }\n        return(\n            <div style={{backgroundColor:\"lightgrey\"}}>\n                <div style={tableWrapper}>\n                    <table className=\"table table-bordered table-striped table-sm sticky\">\n                        <thead className=\"table-dark\">\n                            <tr>\n                            <th scope=\"col\" style={{width:\"10%\"}}>Query #</th>\n                            <th scope=\"col\" style={{width:\"20%\"}}>Input Query</th>\n                            <th scope=\"col\" style={{width:\"20%\"}}>Output Collection</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {this.props.results.map((result,index)=>{\n                                return <ResultsRow key={index}\n                                            result={result}\n                                            id={index+1}/>\n                            })}\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Results;","import React, { Component } from 'react';\nimport {Button, Modal} from 'react-bootstrap'\n\nclass SubmissionModal extends Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            answer:\"\"\n        }\n        // this.submitAndDismissModal = this.submitAndDismissModal.bind(this)\n        this.handleChange=this.handleChange.bind(this)\n    }\n\n    validateAnswer(ans){\n        // const ansRGEX = /^\\[+[0-9,\\s]+\\]$/\n        const ansRGEX = /^[0-9,\\s]*$/\n        return ansRGEX.test(ans)\n    }\n    \n    submitAndDismissModal(event){\n        const ele = this.state.answer\n        if(this.validateAnswer(ele)){\n            // let query = ele.substr(1,ele.length-2).split(\",\")\n            let query = ele.split(\",\")\n            const temparr =[]\n            const temparr2 = []\n            const hash={}\n            query.forEach((ele)=>{\n                let tempEle=ele.trim()\n                if(tempEle!==\"\" && !hash[ele]){\n                    temparr2.push(tempEle)\n                    hash[ele] = true\n                }\n            })\n            temparr2.forEach((ele)=>{\n                temparr.push(parseInt(ele))\n            })\n            if(temparr2.length===this.props.size){\n                // console.log(temparr)\n                this.props.submitHandler(temparr,event)\n                this.props.onHide(event)\n                this.setState({\n                    answer:\"\"\n                })\n            }else{\n                alert(`Hint: Your answer should contain exactly as many items as the size of the black box list you generated and should not contain duplicates\\n\\nSize of black box list: ${this.props.size}\\nSize of your answer: ${temparr2.length}`)\n            }\n        }else{\n            alert(\"Please check your answer and follow the format specified exactly:\\ne.g. <answer>: 3, 5, 9, 2, 1\")\n        }\n    }\n\n    handleChange(event){\n        this.setState({\n            answer: event.target.value\n        })\n    }\n    \n    render(){\n        const childProps = {show:this.props.show, onHide:this.props.onHide}\n        const headerStyle={textAlign:\"center\", paddingBottom:\"0.2rem\"}\n        return (\n            <>\n                <Modal\n                {...childProps}\n                size=\"lg\"\n                aria-labelledby=\"contained-modal-title-vcenter\"\n                centered\n                >\n                    <Modal.Header closeButton>\n                        <Modal.Title id=\"contained-modal-title-vcenter\">\n                            Final Answer Submission\n                        </Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <div>\n                            <h5 style={headerStyle}>Are you sure you want to submit?</h5> \n                            <input type=\"text\" \n                                className=\"form-control\"\n                                style={{fontSize:\"1rem\"}} \n                                name=\"query-input\"\n                                placeholder= \"e.g. [1, 5, 7, 10]\"\n                                value={this.state.answer}\n                                onChange={this.handleChange}\n                                />\n                            <p style={{fontSize:\"0.8rem\", color:\"red\", marginTop:\"0.8rem\"}}>\n                                You only have ONE attempt to submit the final answer,\n                                you will fail this challenge if you submit the wrong answer\n                            </p>\n                        </div>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button variant=\"danger\" onClick={(e)=>this.submitAndDismissModal(e)}>Submit</Button>\n                        <Button variant=\"secondary\" onClick={this.props.onHide}>Cancel</Button>\n                    </Modal.Footer>\n                </Modal>\n            </>\n        );\n    }\n}\n\nexport default SubmissionModal;","import React, { Component } from 'react';\nimport {Link} from 'react-router-dom'\nimport Input from './Input'\nimport Results from './Results'\nimport SubmissionModal from './SubmissionModal';\n\n\nclass StartChallenge extends Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            highScore: \"N/A\",\n            counter: 0,\n            size: 1,\n            attemptedSize: 0,\n            blackbox: [],\n            createdBlackBox: false,\n            generateBtn: \"btn-block btn-danger btn-font mb-1\",\n            itemSpan: \"item\",\n            currentQuery: \"\",\n            resultsArr: [],\n            modalShow: false,\n            success: false,\n            loading: false,\n        }\n        this.changeSize = this.changeSize.bind(this)\n        this.handleChange=this.handleChange.bind(this)\n        this.queryHandler=this.queryHandler.bind(this)\n        this.setModalShow=this.setModalShow.bind(this)\n        this.submitHandlerWithModal=this.submitHandlerWithModal.bind(this)\n    }\n\n    changeSize(event){\n        this.setState({\n            size: event.target.value\n        })\n        if(event.target.value === '1'){\n            this.setState({\n                itemSpan:\"item\"\n            })\n        }else{\n            this.setState({\n                itemSpan:\"items\"\n            })\n        }\n    }\n    setModalShow(visible){\n        this.setState({\n            modalShow:visible\n        })\n    }\n    submitHandlerWithModal(trialAnswer,event){\n        // this.setModalShow(true)\n        let arrMatches=true\n        for(let i=0; i< this.state.blackbox.length; i++){\n            // console.log(trialAnswer[i])\n            if(this.state.blackbox[i] !== trialAnswer[i]){\n                arrMatches = false\n                break\n            }\n        }\n        if(arrMatches){\n            this.setState({\n                success:true,\n                attempt: true\n            })\n            if(this.state.highScore===\"N/A\"||this.state.highScore > this.state.counter){\n                this.setState({\n                    attemptedSize:this.state.size,\n                    highScore: this.state.counter\n                })\n            }else if(this.state.highScore === this.state.counter && this.state.attemptedSize < this.state.size){\n                this.setState({\n                    attemptedSize:this.state.size\n                })\n            }\n        }else{\n            this.setState({\n                success:false,\n                attempt:true\n            })\n        }\n\n    }\n\n    handleChange(event){\n        // console.log(event.target.value)\n        this.setState({\n            currentQuery: event.target.value\n        })\n    }\n\n    validateQuery(query){\n        // const queryRGEX = /^\\[+[0-9,\\s]+\\]$/\n        //simplify input expression\n        const queryRGEX = /^[0-9,\\s]*$/\n        return queryRGEX.test(query)\n    }\n\n    randomizeArray(arr){\n        let temparr =[]\n        arr.forEach((ele)=>{\n            temparr.push(ele)\n        })\n        for(let i=0; i<arr.length; i++){\n            let rand1 = Math.min(Math.floor(Math.random()*arr.length), arr.length-1)\n            let rand2 = Math.min(Math.floor(Math.random()*arr.length), arr.length-1)\n            let buff = temparr[rand1]\n            temparr[rand1] = temparr[rand2]\n            temparr[rand2] = buff\n        }\n        return temparr\n    }\n\n\n    queryHandler(e){\n        e.preventDefault()\n        const temparr = this.state.resultsArr\n        const ele = this.state.currentQuery\n        if(this.validateQuery(ele)){\n            // let query = ele.substr(1,ele.length-2).split(\",\")\n            let query = ele.split(\",\")\n            const temparr2 = []\n            const hash={}\n            query.forEach((ele)=>{\n                let tempEle=ele.trim()\n                if(tempEle!==\"\" && !hash[ele]){\n                    temparr2.push(tempEle)\n                    hash[ele] = true\n                }\n            })\n            let resultsarr = []\n            let error = false\n            if(this.state.blackbox!==null && this.state.blackbox.length>0 && temparr2!==null && temparr2.length>0){\n                for(let i =0; i<temparr2.length; i++){\n                    let ele = temparr2[i]\n                    if(ele>this.state.blackbox.length || ele<=0){\n                        alert(\"The query you entered asks for invalid index, index must be greater than 0 and less than or equals to the size of the black box list\")\n                        error = true\n                        break\n                    }\n                    let tempEle2 = this.state.blackbox[ele-1]\n                    resultsarr.push(tempEle2)\n                }\n            }\n            if(!error){\n                // console.log(resultsarr)\n                resultsarr= this.randomizeArray(resultsarr)\n                const res = '['+ resultsarr.toString()+']'\n                temparr.push([ele, res])\n                this.setState({\n                    resultsArr: temparr,\n                    currentQuery:\"\",\n                    counter:this.state.counter + 1\n                })\n            }\n        }else{\n            alert(\"Please check your input and follow the format specified exactly:\\ne.g. <input>: 3, 5, 9, 2, 1\")\n        }\n        // query.map((ele)=>{\n        //     ele.trim()\n        // }).filter(this.isNotEmptyString)\n    }\n\n    createNewBlackBox(){\n        const greenBtn = \"btn-block btn-success btn-font mb-1\"\n        const newbox =[]\n        const n = this.state.size\n        const hash ={}\n        let i = 0;\n        while(i<n){\n            const rand = Math.floor(Math.random() * 10 * n)\n            // console.log(rand)\n            if(hash[rand]===true){\n                //skip\n            }else{\n                hash[rand] = true\n                newbox.push(rand)\n                i++\n            }\n        }\n        this.setState({\n            createdBlackBox:true,\n            blackbox:newbox,\n            generateBtn:greenBtn,\n        })\n    }\n\n    resetBlackBox(){\n        const newbox =[]\n        const n = this.state.size\n        const hash ={}\n        let i = 0;\n        while(i<n){\n            const rand = Math.floor(Math.random() * 10 * n)\n            if(hash[rand]===true){\n                //skip\n            }else{\n                hash[rand] = true\n                newbox.push(rand)\n                i++\n            }\n        }\n        this.setState({\n            createdBlackBox:true,\n            blackbox:newbox,\n            attempt:false,\n            resultsArr:[],\n            counter:0,\n            loading:true,\n        },\n            ()=>{\n                setTimeout(()=>{\n                    this.setState({loading:false})\n                }, 500)\n            }\n        )\n        // debugging to cheat and get the blackbox\n        // console.log(newbox)\n    }\n\n    render() {\n        return (\n            <div>\n            <Link to=\"/challenge\" style={{textDecoration:\"none\", margin:\"1rem\"}}>\n                <button type=\"button\" className=\" btn btn-dark btn-exit\">\n                    Back to Challenge Room\n                </button>\n            </Link>\n            <div className=\"container\">\n                <div className=\"flex-column align-content-center\" style={{width:\"100%\"}}>\n                    <div className=\"sub-intro\" style={{textAlign:\"center\", fontSize:\"3.5vmin\"}}>Begin Challenge</div>\n                    <div className=\"regText\" style={{textAlign:\"center\", marginTop:\"1rem\"}}>\n                        You can query the black box list by asking questions in the following format:\n                        <br/><br/>\n                        Black Box List of size n: [a<sub>1</sub>, a<sub>2</sub>, a<sub>3</sub>, ... a<sub>n</sub>]<br/><br/>\n                        <b>Input (remove [] for actual input):</b> [k<sub>1</sub>, k<sub>2</sub>, k<sub>3</sub>, ... k<sub>m</sub>] - Give me the k<sub>1</sub><sup>th</sup>,\n                        k<sub>2</sub><sup>th</sup> ... and k<sub>m</sub><sup>th</sup> item in the list <br/>\n                        <b>Output:</b> [a<sub>k<sub>1</sub></sub>, a<sub>k<sub>2</sub></sub>, a<sub>k<sub>3</sub></sub>, ... a<sub>k<sub>m</sub></sub>] -\n                        A collection containing the a<sub>k<sub>1</sub></sub><sup>th</sup>, a<sub>k<sub>2</sub></sub><sup>th</sup> ... and a<sub>k<sub>m</sub></sub><sup>th</sup> item in <b>random order</b><br/><br/>\n                        e.g. Black Box List of size 8: [2, 14, 9, 15, 3, 7, 11, 16]<br/><br/>\n                        <b>Input:</b> [1, 5, 7] - Give me the 1st, 5th and 7th item in the list <br/>\n                        <b>Output:</b> [3, 11, 2] -\n                        A collection containing the 1st, 5th and 7th item in <b>any random order</b><br/><br/>\n                        Once you feel that you know the order of the items in the black box list, submit your answer in the format below (without brackets []):<br/><br/>\n                        [a<sub>1</sub>, a<sub>2</sub>, a<sub>3</sub>, a<sub>4</sub>... a<sub>i</sub>, ...a<sub>n</sub>]<br/>where a<sub>i</sub> is the\n                        i<sup>th</sup> item in the black box list and n is the number of items in the black box list\n                        <br/><br/>\n                        e.g. [3, 5, 9, 2, 1]\n                        <i className=\"fa-refresh fa-spin fa\"\n                                style={{opacity:0}}/>\n                        <br/><br/>\n                        <span style={{color:((this.state.attempt&&this.state.success)? \"green\":\"red\"), fontSize:\"3vmin\"}}>\n                            {!this.state.attempt &&\n                                \"You only have one attempt to submit your final answer\"\n                            }\n                            {this.state.attempt && this.state.success &&\n                                <span>Congratulations!! You passed this challenge!!\n                                    <br/> You took {this.state.counter} {this.state.counter===1?\"query\":\"queries\"} to complete this challenge ({this.state.size} {this.state.size===1?\"item\":\"items\"})\n                                </span>\n                            }\n                            {this.state.attempt && !this.state.success &&\n                                \"Failure... You failed this challenge!\"\n                            }\n                            {this.state.attempt && \n                                <span><br/><br/>The answer is <br/>[ {this.state.blackbox.toString()} ]</span>\n                            }\n                        </span><br/><br/>\n                    </div>\n                    <div style={{display:\"flex\", justifyContent:\"center\"}}>\n                        <div style={{width:\"60vmin\",}} className=\"regText\">\n                            Set the size of black box list to generate: {this.state.size} {this.state.itemSpan}\n                            <input type=\"range\" onChange={(e)=>this.changeSize(e)} className=\"custom-range\" defaultValue=\"1\" max=\"20\" min=\"1\" step=\"1\"></input>\n                        </div>\n                    </div>\n                    <div style={{display:\"flex\", justifyContent:\"center\"}}>\n                        <div style={{width:\"60vmin\",}}>\n                            <button type=\"button\" onClick={()=>this.createNewBlackBox()} className={this.state.generateBtn} disabled={this.state.createdBlackBox}>\n                                {this.state.createdBlackBox?  <span>Black box list generated</span>: <span>Generate a black box list to start</span>}\n                            </button>\n                        </div>\n                    </div>\n                    <div style={{display:\"flex\", justifyContent:\"center\"}}>\n                        <div style={{width:\"60vmin\",}}>\n                            <button type=\"button\" \n                                onClick={()=>this.resetBlackBox()}\n                                className={this.state.attempt? \"btn-block btn-danger btn-font mb-1 loading\" :\"btn-block btn-secondary btn-font mb-1 loading\"} \n                                disabled={!this.state.createdBlackBox || this.state.loading}\n                                style={!this.state.createdBlackBox?{cursor:\"not-allowed\"}:{cursor:\"pointer\"}}>\n                                    {this.state.createdBlackBox\n                                        ?\n                                        <span>\n                                            {this.state.loading&&\n                                                <i className=\"fa-refresh fa-spin fa\"\n                                                    style={{marginRight:\"0.5vmin\"}}\n                                                />\n                                            }\n                                            {this.state.loading?\n                                                \"Resetting black box list\"\n                                                :\"Reset black box list\"\n                                            }\n                                        </span>\n                                        :\n                                        <span>\n                                            Disabled\n                                        </span>\n                                    }\n                            </button>\n                        </div>\n                    </div>\n                    <div style={{display:\"flex\", justifyContent:\"center\"}}>\n                        <div style={{width:\"60vmin\",}}>\n                            <button type=\"button\" \n                                onClick={()=>this.setModalShow(true)}\n                                className={this.state.createdBlackBox && !this.state.attempt? \"btn-block btn-danger btn-font mb-1\" : \"btn-block btn-secondary btn-font mb-1\"} \n                                disabled={!this.state.createdBlackBox || this.state.attempt}\n                                style={!this.state.createdBlackBox || this.state.attempt?{cursor:\"not-allowed\"}:{cursor:\"pointer\"}}>\n                                    {this.state.createdBlackBox && !this.state.attempt?  \"Submit final answer\": \"Disabled\"}\n                            </button>\n                        </div>\n                    </div>\n                    <Input\n                        handler={this.queryHandler}\n                        value={this.state.currentQuery}\n                        handleChange={this.handleChange}\n                        enabled={this.state.createdBlackBox&&!this.state.attempt}/>\n                </div>\n            </div>\n            <div className=\"container-fluid\" style={{marginBottom:\"30%\"}}>\n                <Results\n                    results={this.state.resultsArr}/> \n            </div>\n            <div className=\"regText\" style={{position:\"absolute\", top:\"1rem\", right:\"1rem\", textAlign:\"right\"}}>\n                Size of black box list attempted: {this.state.attemptedSize}\n                <br/>Least queries used: {this.state.highScore}\n            </div>\n            <SubmissionModal\n                show={this.state.modalShow}\n                onHide={() => this.setModalShow(false)}\n                submitHandler={this.submitHandlerWithModal}\n                size={this.state.blackbox.length}\n                />\n            </div>\n        );\n    }\n}\n\nexport default StartChallenge;","import React from 'react';\nimport './App.css';\nimport './css/font-awesome.min.css'\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom'\nimport Challenge from './components/Challenge'\nimport Answer from './components/Answer'\nimport PaperBlackBox from './components/PaperBlackBox'\nimport CreateBlackBox from './components/CreateBlackBox'\nimport StartChallenge from './components/StartChallenge'\n\nclass App extends React.Component {\n  constructor(props){\n    super(props)\n    this.state={\n\n    }\n  }\n  \n  \n  render(){\n    return (\n      <div>\n        \n        \n        <Router>\n          <Route path=\"/\" exact render={\n          ()=>{\n            return(\n            <div className=\"App-header\">\n              <span className=\"intro\">Greetings Traveller<br/>Welcome to</span>\n              <span className=\"header\">Magician's Red</span>\n              <div className=\"App\" style={{color:\"coral\", fontSize:\"2vmin\", marginTop:\"1vmin\", marginBottom:\"2vmin\"}}>Are you seeking a challenge or an answer?</div>\n              <div style={{width:\"40vmin\"}}>\n              <Link to=\"/challenge\" style={{textDecoration:\"none\", zIndex:10}}>\n                <button type=\"button\" className=\"btn-block btn-secondary btn-font\">\n                  Give me a challenge\n                </button>\n              </Link>\n              <Link to=\"/answer\" style={{textDecoration:\"none\", zIndex:10}}>\n                <button type=\"button\" className=\"btn-block btn-danger btn-font\">\n                  <div>I want an answer</div>\n                </button>\n              </Link>\n              </div>\n              <img style={{\n                position:\"relative\",\n                marginTop:\"2vmin\",\n                zIndex:0,\n                display:\"block\", \n                marginLeft:\"auto\", \n                marginRight:\"auto\",\n                opacity:\"100%\"\n                }}\n                src=\"/fire-trans.gif\" alt=\"Welcome to my humble abode\"/>{\n                  //img credits: https://giphy.com/chrisgannon Chris Gannon\n                }\n            </div>\n          )}\n        }/>\n        <Route path=\"/challenge\" exact component={Challenge}/>\n        <Route path=\"/answer\" exact component={Answer}/>\n        <Route path=\"/answer/createblackbox\" exact component={CreateBlackBox}/>\n        <Route path=\"/answer/paperblackbox\" exact component={PaperBlackBox}/>\n        <Route path=\"/challenge/start\" exact component={StartChallenge}/>\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n"],"sourceRoot":""}